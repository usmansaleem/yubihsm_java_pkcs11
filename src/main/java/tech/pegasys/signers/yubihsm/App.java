/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tech.pegasys.signers.yubihsm;

import iaik.pkcs.pkcs11.DefaultInitializeArgs;
import iaik.pkcs.pkcs11.Info;
import iaik.pkcs.pkcs11.Module;
import iaik.pkcs.pkcs11.Session;
import iaik.pkcs.pkcs11.Slot;
import iaik.pkcs.pkcs11.Token;
import iaik.pkcs.pkcs11.objects.Data;
import iaik.pkcs.pkcs11.objects.PKCS11Object;
import org.apache.tuweni.bytes.Bytes;

import java.nio.file.Path;
import java.util.logging.Logger;

public class App {
    private static final Logger LOG = Logger.getLogger(App.class.getName());
    public String getGreeting() {
        return "Hello world.";
    }

    // arg0 - path to yubihsm pkcs11 so/dylib. for example: /Users/user/yubihsm2-sdk/lib/pkcs11/yubihsm_pkcs11.dylib
    // arg1 - yubihsm pkcs11 conf. for example `connector=http://localhost12345 debug`. See https://developers.yubico.com/YubiHSM2/Component_Reference/PKCS_11/
    public static void main(String[] args) {
        if (args.length < 2) {
            System.err.println("Usage java App <path_to_yubihsm_pkcs11.so|dylib> <pkcs11 config string>");
            System.exit(-1);
        }

        try {
            Module pkcs11Module = Module.getInstance(args[0]);
            DefaultInitializeArgs defaultInitializeArgs = new DefaultInitializeArgs();
            defaultInitializeArgs.setReserved(args[1]);
            pkcs11Module.initialize(defaultInitializeArgs);
            final Info info = pkcs11Module.getInfo();
            LOG.info("Module Info " + info);

            // get slot list
            final Slot[] slotList = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);
            for (Slot slot : slotList) {
                System.out.println("Slot: " + slot);
            }

            // use the first slot (Yubi returns 1 slot anyways)
            final Token token = slotList[0].getToken();

            // open session
            Session session = token.openSession(Token.SessionType.SERIAL_SESSION,
                    Token.SessionReadWriteBehavior.RO_SESSION, null, null);

            // pin is 16 bits auth id (0 padded) combined with password. So, 1 and password would become 0001password
            final short authId = 1;
            final String password = "password";
            final String pinStr = String.format("%04X", authId) + password; //TODO: Check auth key > 16

            // perform login
            session.login(Session.UserType.USER, pinStr.toCharArray());
            System.out.println("Logged in: " + session.getSessionInfo());

            //Fetch data (findInit, find, findFinal)
            YubiData dataObjectTemplate = new YubiData();
            dataObjectTemplate.getId().setByteArrayValue(Bytes.ofUnsignedShort(20).toArrayUnsafe());

            session.findObjectsInit(dataObjectTemplate);
            PKCS11Object[] objects = session.findObjects(1);

            System.out.println("--------------------------------------------------");
            if (objects.length > 0) {
                System.out.println(((Data)objects[0]).getValue());
            } else {
                System.out.println("Data not found");
            }
            System.out.println("___________________________________________________");


            session.findObjectsFinal();

            // logging out, close session and module finalize
            session.logout();
            session.closeSession();
            pkcs11Module.finalize(null);
        } catch (final Exception e) {
            e.printStackTrace();
        }

        System.exit(0);
    }
}
